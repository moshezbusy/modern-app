// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                      String    @id @default(cuid())
  name                    String?
  email                   String    @unique
  emailVerified          DateTime?
  image                 String?
  bio                   String?
  hashedPassword         String    @map("password")
  verificationToken      String?   @unique
  verificationTokenExpiry DateTime?
  resetPasswordToken     String?   @unique
  resetPasswordTokenExpiry DateTime?
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  emailNotifications    Boolean  @default(true)
  marketingEmails       Boolean  @default(false)
  securityAlerts        Boolean  @default(true)
  twoFactorEnabled      Boolean  @default(false)
  language              String?  @default("en")
  timezone              String?  @default("UTC")
  channelPreferences    Json?
  accounts              Account[]
  sessions              Session[]
  role                  String    @default("agent") // admin, agent, supervisor
  channels              Json?     // Assigned channels
  metadata              Json?     // Additional user settings
  organization          Organization? @relation(fields: [organizationId], references: [id])
  organizationId        String?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Channel Types
enum ChannelType {
  WHATSAPP
  MESSENGER
  SMS
  WEBCHAT
  EMAIL
}

// Message Status
enum MessageStatus {
  SENT
  DELIVERED
  READ
  FAILED
}

// Campaign Types
enum CampaignType {
  BROADCAST
  DRIP
  AUTOMATED
}

// Contact Models
model Contact {
  id              String    @id @default(cuid())
  name            String
  email           String?   @unique
  phone           String?
  tags            String[]
  customFields    Json?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  messages        Message[]
  campaigns       Campaign[] @relation("CampaignContacts")
  notes           Note[]
  organization    Organization @relation(fields: [organizationId], references: [id])
  organizationId  String
}

// Channel Configuration
model Channel {
  id              String    @id @default(cuid())
  type            ChannelType
  name            String
  config          Json
  enabled         Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  messages        Message[]
  organization    Organization @relation(fields: [organizationId], references: [id])
  organizationId  String
}

// Messages
model Message {
  id              String    @id @default(cuid())
  content         String
  type            ChannelType
  status          MessageStatus
  metadata        Json?
  sentAt          DateTime  @default(now())
  channel         Channel   @relation(fields: [channelId], references: [id])
  channelId       String
  contact         Contact   @relation(fields: [contactId], references: [id])
  contactId       String
  campaign        Campaign? @relation(fields: [campaignId], references: [id])
  campaignId      String?
  organization    Organization @relation(fields: [organizationId], references: [id])
  organizationId  String
}

// Campaigns
model Campaign {
  id              String    @id @default(cuid())
  name            String
  type            CampaignType
  content         Json
  schedule        Json?
  status          String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  messages        Message[]
  contacts        Contact[] @relation("CampaignContacts")
  organization    Organization @relation(fields: [organizationId], references: [id])
  organizationId  String
}

// Chatbots
model Chatbot {
  id              String    @id @default(cuid())
  name            String
  flow            Json
  enabled         Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  organization    Organization @relation(fields: [organizationId], references: [id])
  organizationId  String
}

// Notes
model Note {
  id              String    @id @default(cuid())
  content         String
  contact         Contact   @relation(fields: [contactId], references: [id])
  contactId       String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  organization    Organization @relation(fields: [organizationId], references: [id])
  organizationId  String
}

// Organization
model Organization {
  id              String    @id @default(cuid())
  name            String
  channels        Channel[]
  contacts        Contact[]
  messages        Message[]
  campaigns       Campaign[]
  chatbots        Chatbot[]
  notes           Note[]
  users           User[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
} 